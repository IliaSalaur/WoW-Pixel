#ifndef FONTS_H
#define FONTS_H

#include <Arduino.h>
namespace WoWPixelFonts
{
  uint8_t font5x7[][5] = {
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x00 (nul)
    {0x3E, 0x5B, 0x4F, 0x5B, 0x3E}, // 0x01 (soh)
    {0x3E, 0x6B, 0x4F, 0x6B, 0x3E}, // 0x02 (stx)
    {0x1C, 0x3E, 0x7C, 0x3E, 0x1C}, // 0x03 (etx)
    {0x18, 0x3C, 0x7E, 0x3C, 0x18}, // 0x04 (eot)
    {0x1C, 0x57, 0x7D, 0x57, 0x1C}, // 0x05 (enq)
    {0x1C, 0x5E, 0x7F, 0x5E, 0x1C}, // 0x06 (ack)
    {0x00, 0x18, 0x3C, 0x18, 0x00}, // 0x07 (bel)
    {0xFF, 0xE7, 0xC3, 0xE7, 0xFF}, // 0x08 (bs)
    {0x00, 0x18, 0x24, 0x18, 0x00}, // 0x09 (tab)
    {0xFF, 0xE7, 0xDB, 0xE7, 0xFF}, // 0x0A (lf)
    {0x30, 0x48, 0x3A, 0x06, 0x0E}, // 0x0B (vt)
    {0x26, 0x29, 0x79, 0x29, 0x26}, // 0x0C (np)
    {0x40, 0x7F, 0x05, 0x05, 0x07}, // 0x0D (cr)
    {0x40, 0x7F, 0x05, 0x25, 0x3F}, // 0x0E (so)
    {0x5A, 0x3C, 0xE7, 0x3C, 0x5A}, // 0x0F (si)
    {0x7F, 0x3E, 0x1C, 0x1C, 0x08}, // 0x10 (dle)
    {0x08, 0x1C, 0x1C, 0x3E, 0x7F}, // 0x11 (dc1)
    {0x14, 0x22, 0x7F, 0x22, 0x14}, // 0x12 (dc2)
    {0x5F, 0x5F, 0x00, 0x5F, 0x5F}, // 0x13 (dc3)
    {0x06, 0x09, 0x7F, 0x01, 0x7F}, // 0x14 (dc4)
    {0x00, 0x66, 0x89, 0x95, 0x6A}, // 0x15 (nak)
    {0x60, 0x60, 0x60, 0x60, 0x60}, // 0x16 (syn)
    {0x94, 0xA2, 0xFF, 0xA2, 0x94}, // 0x17 (etb)
    {0x08, 0x04, 0x7E, 0x04, 0x08}, // 0x18 (can)
    {0x10, 0x20, 0x7E, 0x20, 0x10}, // 0x19 (em)
    {0x08, 0x08, 0x2A, 0x1C, 0x08}, // 0x1A (eof)
    {0x08, 0x1C, 0x2A, 0x08, 0x08}, // 0x1B (esc)
    {0x1E, 0x10, 0x10, 0x10, 0x10}, // 0x1C (fs)
    {0x0C, 0x1E, 0x0C, 0x1E, 0x0C}, // 0x1D (gs)
    {0x30, 0x38, 0x3E, 0x38, 0x30}, // 0x1E (rs)
    {0x06, 0x0E, 0x3E, 0x0E, 0x06}, // 0x1F (us)
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20
    {0x00, 0x00, 0x5F, 0x00, 0x00}, // 0x21 !
    {0x00, 0x07, 0x00, 0x07, 0x00}, // 0x22 "
    {0x14, 0x7F, 0x14, 0x7F, 0x14}, // 0x23 #
    {0x24, 0x2A, 0x7F, 0x2A, 0x12}, // 0x24 $
    {0x23, 0x13, 0x08, 0x64, 0x62}, // 0x25 %
    {0x36, 0x49, 0x56, 0x20, 0x50}, // 0x26 &
    {0x00, 0x08, 0x07, 0x03, 0x00}, // 0x27 '
    {0x00, 0x1C, 0x22, 0x41, 0x00}, // 0x28 (
    {0x00, 0x41, 0x22, 0x1C, 0x00}, // 0x29 )
    {0x2A, 0x1C, 0x7F, 0x1C, 0x2A}, // 0x2A *
    {0x08, 0x08, 0x3E, 0x08, 0x08}, // 0x2B +
    {0x00, 0x80, 0x70, 0x30, 0x00}, // 0x2C ,
    {0x08, 0x08, 0x08, 0x08, 0x08}, // 0x2D -
    {0x00, 0x00, 0x60, 0x60, 0x00}, // 0x2E .
    {0x20, 0x10, 0x08, 0x04, 0x02}, // 0x2F /
    /*
    {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0x30 0
    {0x00, 0x42, 0x7F, 0x40, 0x00}, // 0x31 1
    {0x72, 0x49, 0x49, 0x49, 0x46}, // 0x32 2
    {0x21, 0x41, 0x49, 0x4D, 0x33}, // 0x33 3
    {0x18, 0x14, 0x12, 0x7F, 0x10}, // 0x34 4
    {0x27, 0x45, 0x45, 0x45, 0x39}, // 0x35 5
    {0x3C, 0x4A, 0x49, 0x49, 0x31}, // 0x36 6
    {0x41, 0x21, 0x11, 0x09, 0x07}, // 0x37 7
    {0x36, 0x49, 0x49, 0x49, 0x36}, // 0x38 8
    {0x46, 0x49, 0x49, 0x29, 0x1E}, // 0x39 9
    */

    {0x0, 0b1111100, 0b1000100, 0b1111100, 0x0},    // 0
    {0x0, 0b0000000, 0b0000000, 0b1111100, 0x0},    // 1
    {0x0, 0b1110100, 0b1010100, 0b1011100, 0x0},    // 2
    {0x0, 0b1010100, 0b1010100, 0b1111100, 0x0},    // 3
    {0x0, 0b0011100, 0b0010000, 0b1111100, 0x0},    // 4
    {0x0, 0b1011100, 0b1010100, 0b1110100, 0x0},    // 5
    {0x0, 0b1111100, 0b1010100, 0b1110100, 0x0},    // 6
    {0x0, 0b0000100, 0b0000100, 0b1111100, 0x0},    // 7
    {0x0, 0b1111100, 0b1010100, 0b1111100, 0x0},    // 8
    {0x0, 0b1011100, 0b1010100, 0b1111100, 0x0},    // 9

    {0x00, 0x00, 0x14, 0x00, 0x00}, // 0x3A :
    {0x00, 0x40, 0x34, 0x00, 0x00}, // 0x3B ;
    {0x00, 0x08, 0x14, 0x22, 0x41}, // 0x3C <
    {0x14, 0x14, 0x14, 0x14, 0x14}, // 0x3D =
    {0x00, 0x41, 0x22, 0x14, 0x08}, // 0x3E >
    {0x02, 0x01, 0x59, 0x09, 0x06}, // 0x3F ?
    {0x3E, 0x41, 0x5D, 0x59, 0x4E}, // 0x40 @
    {0x7C, 0x12, 0x11, 0x12, 0x7C}, // 0x41 A
    {0x7F, 0x49, 0x49, 0x49, 0x36}, // 0x42 B
    {0x3E, 0x41, 0x41, 0x41, 0x22}, // 0x43 C
    {0x7F, 0x41, 0x41, 0x41, 0x3E}, // 0x44 D
    {0x7F, 0x49, 0x49, 0x49, 0x41}, // 0x45 E
    {0x7F, 0x09, 0x09, 0x09, 0x01}, // 0x46 F
    {0x3E, 0x41, 0x41, 0x51, 0x73}, // 0x47 G
    {0x7F, 0x08, 0x08, 0x08, 0x7F}, // 0x48 H
    {0x00, 0x41, 0x7F, 0x41, 0x00}, // 0x49 I
    {0x20, 0x40, 0x41, 0x3F, 0x01}, // 0x4A J
    {0x7F, 0x08, 0x14, 0x22, 0x41}, // 0x4B K
    {0x7F, 0x40, 0x40, 0x40, 0x40}, // 0x4C L
    {0x7F, 0x02, 0x1C, 0x02, 0x7F}, // 0x4D M
    {0x7F, 0x04, 0x08, 0x10, 0x7F}, // 0x4E N
    {0x3E, 0x41, 0x41, 0x41, 0x3E}, // 0x4F O
    {0x7F, 0x09, 0x09, 0x09, 0x06}, // 0x50 P
    {0x3E, 0x41, 0x51, 0x21, 0x5E}, // 0x51 Q
    {0x7F, 0x09, 0x19, 0x29, 0x46}, // 0x52 R
    {0x26, 0x49, 0x49, 0x49, 0x32}, // 0x53 S
    {0x03, 0x01, 0x7F, 0x01, 0x03}, // 0x54 T
    {0x3F, 0x40, 0x40, 0x40, 0x3F}, // 0x55 U
    {0x1F, 0x20, 0x40, 0x20, 0x1F}, // 0x56 V
    {0x3F, 0x40, 0x38, 0x40, 0x3F}, // 0x57 W
    {0x63, 0x14, 0x08, 0x14, 0x63}, // 0x58 X
    {0x03, 0x04, 0x78, 0x04, 0x03}, // 0x59 Y
    {0x61, 0x59, 0x49, 0x4D, 0x43}, // 0x5A Z
    {0x00, 0x7F, 0x41, 0x41, 0x41}, // 0x5B [
    {0x02, 0x04, 0x08, 0x10, 0x20}, // 0x5C backslash
    {0x00, 0x41, 0x41, 0x41, 0x7F}, // 0x5D ]
    {0x04, 0x02, 0x01, 0x02, 0x04}, // 0x5E ^
    {0x40, 0x40, 0x40, 0x40, 0x40}, // 0x5F _
    {0x00, 0x03, 0x07, 0x08, 0x00}, // 0x60 `
    {0x20, 0x54, 0x54, 0x78, 0x0}, // 0x61 a
    {0x7F, 0x28, 0x44, 0x44, 0x38}, // 0x62 b
    {0x38, 0x44, 0x44, 0x44, 0x28}, // 0x63 c
    {0x38, 0x44, 0x44, 0x28, 0x7F}, // 0x64 d
    {0x38, 0x54, 0x54, 0x54, 0x18}, // 0x65 e
    {0x00, 0x08, 0x7E, 0x09, 0x02}, // 0x66 f
    {0x18, 0xA4, 0xA4, 0x9C, 0x78}, // 0x67 g
    {0x7F, 0x08, 0x04, 0x04, 0x78}, // 0x68 h
    {0x00, 0x44, 0x7D, 0x40, 0x00}, // 0x69 i
    {0x20, 0x40, 0x40, 0x3D, 0x00}, // 0x6A j
    {0x7F, 0x10, 0x28, 0x44, 0x00}, // 0x6B k
    {0x00, 0x41, 0x7F, 0x40, 0x00}, // 0x6C l
    {0x7C, 0x04, 0x78, 0x04, 0x78}, // 0x6D m
    {0x7C, 0x08, 0x04, 0x04, 0x78}, // 0x6E n
    {0x38, 0x44, 0x44, 0x44, 0x38}, // 0x6F o
    {0xFC, 0x18, 0x24, 0x24, 0x18}, // 0x70 p
    {0x18, 0x24, 0x24, 0x18, 0xFC}, // 0x71 q
    {0x7C, 0x08, 0x04, 0x04, 0x08}, // 0x72 r
    {0x48, 0x54, 0x54, 0x54, 0x24}, // 0x73 s
    {0x04, 0x04, 0x3F, 0x44, 0x24}, // 0x74 t
    {0x3C, 0x40, 0x40, 0x20, 0x7C}, // 0x75 u
    {0x1C, 0x20, 0x40, 0x20, 0x1C}, // 0x76 v
    {0x3C, 0x40, 0x30, 0x40, 0x3C}, // 0x77 w
    {0x44, 0x28, 0x10, 0x28, 0x44}, // 0x78 x
    {0x4C, 0x90, 0x90, 0x90, 0x7C}, // 0x79 y
    {0x44, 0x64, 0x54, 0x4C, 0x44}, // 0x7A z
    {0x00, 0x08, 0x36, 0x41, 0x00}, // 0x7B {
    {0x00, 0x00, 0x77, 0x00, 0x00}, // 0x7C |
    {0x00, 0x41, 0x36, 0x08, 0x00}, // 0x7D }
    {0x02, 0x01, 0x02, 0x04, 0x02}, // 0x7E ~
    {0x3C, 0x26, 0x23, 0x26, 0x3C}, // 0x7F 
    {0x1E, 0xA1, 0xA1, 0x61, 0x12}, // 0x80 
    {0x3A, 0x40, 0x40, 0x20, 0x7A}, // 0x81 
    {0x38, 0x54, 0x54, 0x55, 0x59}, // 0x82 
    {0x21, 0x55, 0x55, 0x79, 0x41}, // 0x83 
    {0x22, 0x54, 0x54, 0x78, 0x42}, // 0x84 
    {0x21, 0x55, 0x54, 0x78, 0x40}, // 0x85 
    {0x20, 0x54, 0x55, 0x79, 0x40}, // 0x86 
    {0x0C, 0x1E, 0x52, 0x72, 0x12}, // 0x87 
    {0x39, 0x55, 0x55, 0x55, 0x59}, // 0x88 
    {0x39, 0x54, 0x54, 0x54, 0x59}, // 0x89 
    {0x39, 0x55, 0x54, 0x54, 0x58}, // 0x8A 
    {0x00, 0x00, 0x45, 0x7C, 0x41}, // 0x8B 
    {0x00, 0x02, 0x45, 0x7D, 0x42}, // 0x8C 
    {0x00, 0x01, 0x45, 0x7C, 0x40}, // 0x8D 
    {0x7D, 0x12, 0x11, 0x12, 0x7D}, // 0x8E 
    {0xF0, 0x28, 0x25, 0x28, 0xF0}, // 0x8F 
    {0x7C, 0x54, 0x55, 0x45, 0x00}, // 0x90 
    {0x20, 0x54, 0x54, 0x7C, 0x54}, // 0x91 
    {0x7C, 0x0A, 0x09, 0x7F, 0x49}, // 0x92 
    {0x32, 0x49, 0x49, 0x49, 0x32}, // 0x93 
    {0x3A, 0x44, 0x44, 0x44, 0x3A}, // 0x94 
    {0x32, 0x4A, 0x48, 0x48, 0x30}, // 0x95 
    {0x3A, 0x41, 0x41, 0x21, 0x7A}, // 0x96 
    {0x3A, 0x42, 0x40, 0x20, 0x78}, // 0x97 
    {0x00, 0x9D, 0xA0, 0xA0, 0x7D}, // 0x98 
    {0x3D, 0x42, 0x42, 0x42, 0x3D}, // 0x99 
    {0x3D, 0x40, 0x40, 0x40, 0x3D}, // 0x9A 
    {0x3C, 0x24, 0xFF, 0x24, 0x24}, // 0x9B 
    {0x48, 0x7E, 0x49, 0x43, 0x66}, // 0x9C 
    {0x2B, 0x2F, 0xFC, 0x2F, 0x2B}, // 0x9D 
    {0xFF, 0x09, 0x29, 0xF6, 0x20}, // 0x9E 
    {0xC0, 0x88, 0x7E, 0x09, 0x03}, // 0x9F 
    {0x20, 0x54, 0x54, 0x79, 0x41}, // 0xA0 
    {0x00, 0x00, 0x44, 0x7D, 0x41}, // 0xA1 
    {0x30, 0x48, 0x48, 0x4A, 0x32}, // 0xA2 
    {0x38, 0x40, 0x40, 0x22, 0x7A}, // 0xA3 
    {0x00, 0x7A, 0x0A, 0x0A, 0x72}, // 0xA4 
    {0x7D, 0x0D, 0x19, 0x31, 0x7D}, // 0xA5 
    {0x26, 0x29, 0x29, 0x2F, 0x28}, // 0xA6 
    {0x26, 0x29, 0x29, 0x29, 0x26}, // 0xA7 
    {0x30, 0x48, 0x4D, 0x40, 0x20}, // 0xA8 
    {0x38, 0x08, 0x08, 0x08, 0x08}, // 0xA9 
    {0x08, 0x08, 0x08, 0x08, 0x38}, // 0xAA 
    {0x2F, 0x10, 0xC8, 0xAC, 0xBA}, // 0xAB 
    {0x2F, 0x10, 0x28, 0x34, 0xFA}, // 0xAC 
    {0x00, 0x00, 0x7B, 0x00, 0x00}, // 0xAD 
    {0x08, 0x14, 0x2A, 0x14, 0x22}, // 0xAE 
    {0x22, 0x14, 0x2A, 0x14, 0x08}, // 0xAF 
    {0x55, 0x00, 0x55, 0x00, 0x55}, // 0xB0 
    {0xAA, 0x55, 0xAA, 0x55, 0xAA}, // 0xB1 
    {0xFF, 0x55, 0xFF, 0x55, 0xFF}, // 0xB2 
    {0x00, 0x00, 0x00, 0xFF, 0x00}, // 0xB3 
    {0x10, 0x10, 0x10, 0xFF, 0x00}, // 0xB4 
    {0x14, 0x14, 0x14, 0xFF, 0x00}, // 0xB5 
    {0x10, 0x10, 0xFF, 0x00, 0xFF}, // 0xB6 
    {0x10, 0x10, 0xF0, 0x10, 0xF0}, // 0xB7 
    {0x14, 0x14, 0x14, 0xFC, 0x00}, // 0xB8 
    {0x14, 0x14, 0xF7, 0x00, 0xFF}, // 0xB9 
    {0x00, 0x00, 0xFF, 0x00, 0xFF}, // 0xBA 
    {0x14, 0x14, 0xF4, 0x04, 0xFC}, // 0xBB 
    {0x14, 0x14, 0x17, 0x10, 0x1F}, // 0xBC 
    {0x10, 0x10, 0x1F, 0x10, 0x1F}, // 0xBD 
    {0x14, 0x14, 0x14, 0x1F, 0x00}, // 0xBE 
    {0x10, 0x10, 0x10, 0xF0, 0x00}, // 0xBF 
    {0x00, 0x00, 0x00, 0x1F, 0x10}, // 0xC0 
    {0x10, 0x10, 0x10, 0x1F, 0x10}, // 0xC1 
    {0x10, 0x10, 0x10, 0xF0, 0x10}, // 0xC2 
    {0x00, 0x00, 0x00, 0xFF, 0x10}, // 0xC3 
    {0x10, 0x10, 0x10, 0x10, 0x10}, // 0xC4 
    {0x10, 0x10, 0x10, 0xFF, 0x10}, // 0xC5 
    {0x00, 0x00, 0x00, 0xFF, 0x14}, // 0xC6 
    {0x00, 0x00, 0xFF, 0x00, 0xFF}, // 0xC7 
    {0x00, 0x00, 0x1F, 0x10, 0x17}, // 0xC8 
    {0x00, 0x00, 0xFC, 0x04, 0xF4}, // 0xC9 
    {0x14, 0x14, 0x17, 0x10, 0x17}, // 0xCA 
    {0x14, 0x14, 0xF4, 0x04, 0xF4}, // 0xCB 
    {0x00, 0x00, 0xFF, 0x00, 0xF7}, // 0xCC 
    {0x14, 0x14, 0x14, 0x14, 0x14}, // 0xCD 
    {0x14, 0x14, 0xF7, 0x00, 0xF7}, // 0xCE 
    {0x14, 0x14, 0x14, 0x17, 0x14}, // 0xCF 
    {0x10, 0x10, 0x1F, 0x10, 0x1F}, // 0xD0 
    {0x14, 0x14, 0x14, 0xF4, 0x14}, // 0xD1 
    {0x10, 0x10, 0xF0, 0x10, 0xF0}, // 0xD2 
    {0x00, 0x00, 0x1F, 0x10, 0x1F}, // 0xD3 
    {0x00, 0x00, 0x00, 0x1F, 0x14}, // 0xD4 
    {0x00, 0x00, 0x00, 0xFC, 0x14}, // 0xD5 
    {0x00, 0x00, 0xF0, 0x10, 0xF0}, // 0xD6 
    {0x10, 0x10, 0xFF, 0x10, 0xFF}, // 0xD7 
    {0x14, 0x14, 0x14, 0xFF, 0x14}, // 0xD8 
    {0x10, 0x10, 0x10, 0x1F, 0x00}, // 0xD9 
    {0x00, 0x00, 0x00, 0xF0, 0x10}, // 0xDA 
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // 0xDB 
    {0xF0, 0xF0, 0xF0, 0xF0, 0xF0}, // 0xDC 
    {0xFF, 0xFF, 0xFF, 0x00, 0x00}, // 0xDD 
    {0x00, 0x00, 0x00, 0xFF, 0xFF}, // 0xDE 
    {0x0F, 0x0F, 0x0F, 0x0F, 0x0F}, // 0xDF 
    {0x38, 0x44, 0x44, 0x38, 0x44}, // 0xE0 
    {0xFC, 0x4A, 0x4A, 0x4A, 0x34}, // 0xE1 
    {0x7E, 0x02, 0x02, 0x06, 0x06}, // 0xE2 
    {0x02, 0x7E, 0x02, 0x7E, 0x02}, // 0xE3 
    {0x63, 0x55, 0x49, 0x41, 0x63}, // 0xE4 
    {0x38, 0x44, 0x44, 0x3C, 0x04}, // 0xE5 
    {0x40, 0x7E, 0x20, 0x1E, 0x20}, // 0xE6 
    {0x06, 0x02, 0x7E, 0x02, 0x02}, // 0xE7 
    {0x99, 0xA5, 0xE7, 0xA5, 0x99}, // 0xE8 
    {0x1C, 0x2A, 0x49, 0x2A, 0x1C}, // 0xE9 
    {0x4C, 0x72, 0x01, 0x72, 0x4C}, // 0xEA 
    {0x30, 0x4A, 0x4D, 0x4D, 0x30}, // 0xEB 
    {0x30, 0x48, 0x78, 0x48, 0x30}, // 0xEC 
    {0xBC, 0x62, 0x5A, 0x46, 0x3D}, // 0xED 
    {0x3E, 0x49, 0x49, 0x49, 0x00}, // 0xEE 
    {0x7E, 0x01, 0x01, 0x01, 0x7E}, // 0xEF 
    {0x2A, 0x2A, 0x2A, 0x2A, 0x2A}, // 0xF0 
    {0x44, 0x44, 0x5F, 0x44, 0x44}, // 0xF1 
    {0x40, 0x51, 0x4A, 0x44, 0x40}, // 0xF2 
    {0x40, 0x44, 0x4A, 0x51, 0x40}, // 0xF3 
    {0x00, 0x00, 0xFF, 0x01, 0x03}, // 0xF4 
    {0xE0, 0x80, 0xFF, 0x00, 0x00}, // 0xF5 
    {0x08, 0x08, 0x6B, 0x6B, 0x08}, // 0xF6 
    {0x36, 0x12, 0x36, 0x24, 0x36}, // 0xF7 
    {0x06, 0x0F, 0x09, 0x0F, 0x06}, // 0xF8 
    {0x00, 0x00, 0x18, 0x18, 0x00}, // 0xF9 
    {0x00, 0x00, 0x10, 0x10, 0x00}, // 0xFA 
    {0x30, 0x40, 0xFF, 0x01, 0x01}, // 0xFB 
    {0x00, 0x1F, 0x01, 0x01, 0x1E}, // 0xFC 
    {0x00, 0x19, 0x1D, 0x17, 0x12}, // 0xFD 
    {0x00, 0x3C, 0x3C, 0x3C, 0x3C}, // 0xFE 
    {0x00, 0x00, 0x00, 0x00, 0x00}   // 0xFF 
  };

  uint8_t font3x5Digits[][3]  = {
    {0b11111, 0b10001, 0b11111},    // 0
    {0b00000, 0b00000, 0b11111},    // 1
    {0b10111, 0b10101, 0b11101},    // 2
    {0b10101, 0b10101, 0b11111},    // 3
    {0b11100, 0b00100, 0b11111},    // 4
    {0b11101, 0b10101, 0b10111},    // 5
    {0b11111, 0b10101, 0b10111},    // 6
    {0b10000, 0b10000, 0b11111},    // 7
    {0b11111, 0b10101, 0b11111},    // 8
    {0b11101, 0b10101, 0b11111},    // 9
  };

  uint8_t  font5x7rus[][5] = 
    {
    {0x7e, 0x11, 0x11, 0x11, 0x7e}, //A  0x80  
    {0x7f, 0x49, 0x49, 0x49, 0x33}, //Б  0x81  
    {0x7f, 0x49, 0x49, 0x49, 0x36}, //В  0x82  
    {0x7f, 0x01, 0x01, 0x01, 0x03}, //Г  0x83  
    {0xe0, 0x51, 0x4f, 0x41, 0xff}, //Д  0x84  
    {0x7f, 0x49, 0x49, 0x49, 0x41}, //E  0x85  
    {0x77, 0x08, 0x7f, 0x08, 0x77}, //Ж  0x86  
    {0x41, 0x49, 0x49, 0x49, 0x36}, //З  0x87  
    {0x7f, 0x10, 0x08, 0x04, 0x7f}, //И  0x88  
    {0x7c, 0x21, 0x12, 0x09, 0x7c}, //Й  0x89  
    {0x7f, 0x08, 0x14, 0x22, 0x41}, //K  0x8A  
    {0x20, 0x41, 0x3f, 0x01, 0x7f}, //Л  0x8B  
    {0x7f, 0x02, 0x0c, 0x02, 0x7f}, //M  0x8C  
    {0x7f, 0x08, 0x08, 0x08, 0x7f}, //H  0x8D  
    {0x3e, 0x41, 0x41, 0x41, 0x3e}, //O  0x8E  
    {0x7f, 0x01, 0x01, 0x01, 0x7f}, //П  0x8F  
    {0x7f, 0x09, 0x09, 0x09, 0x06}, //P  0x90  
    {0x3e, 0x41, 0x41, 0x41, 0x22}, //C  0x91
    {0x01, 0x01, 0x7f, 0x01, 0x01}, //T  0x92
    {0x47, 0x28, 0x10, 0x08, 0x07}, //У  0x93
    {0x1c, 0x22, 0x7f, 0x22, 0x1c}, //Ф  0x94
    {0x63, 0x14, 0x08, 0x14, 0x63}, //X  0x95
    {0x7f, 0x40, 0x40, 0x40, 0xff}, //Ц  0x96
    {0x07, 0x08, 0x08, 0x08, 0x7f}, //Ч  0x97
    {0x7f, 0x40, 0x7f, 0x40, 0x7f}, //Ш  0x98
    {0x7f, 0x40, 0x7f, 0x40, 0xff}, //Щ  0x99
    {0x01, 0x7f, 0x48, 0x48, 0x30}, //Ъ  0x9A
    {0x7f, 0x48, 0x30, 0x00, 0x7f}, //Ы  0x9B
    {0x00, 0x7f, 0x48, 0x48, 0x30}, //Э  0x9C
    {0x22, 0x41, 0x49, 0x49, 0x3e}, //Ь  0x9D
    {0x7f, 0x08, 0x3e, 0x41, 0x3e}, //Ю  0x9E
    {0x46, 0x29, 0x19, 0x09, 0x7f}, //Я  0x9F
    // маленькие буквы
    {0x20, 0x54, 0x54, 0x54, 0x78}, //a  0xA0
    {0x3c, 0x4a, 0x4a, 0x49, 0x31}, //б  0xA1
    {0x7c, 0x54, 0x54, 0x28, 0x00}, //в  0xA2
    {0x7c, 0x04, 0x04, 0x04, 0x0c}, //г  0xA3
    {0xe0, 0x54, 0x4c, 0x44, 0xfc}, //д  0xA4
    {0x38, 0x54, 0x54, 0x54, 0x18}, //e  0xA5
    {0x6c, 0x10, 0x7c, 0x10, 0x6c}, //ж  0xA6
    {0x44, 0x44, 0x54, 0x54, 0x28}, //з  0xA7
    {0x7c, 0x20, 0x10, 0x08, 0x7c}, //и  0xA8
    {0x7c, 0x41, 0x22, 0x11, 0x7c}, //й  0xA9
    {0x7c, 0x10, 0x28, 0x44, 0x00}, //к  0xAA
    {0x20, 0x44, 0x3c, 0x04, 0x7c}, //л  0xAB
    {0x7c, 0x08, 0x10, 0x08, 0x7c}, //м  0xAC
    {0x7c, 0x10, 0x10, 0x10, 0x7c}, //н  0xAD
    {0x38, 0x44, 0x44, 0x44, 0x38}, //o  0xAE
    {0x7c, 0x04, 0x04, 0x04, 0x7c}, //п  0xAF
    {0x7C, 0x14, 0x14, 0x14, 0x08}, //p   0xB0
    {0x38, 0x44, 0x44, 0x44, 0x20}, //c  0xB1
    {0x04, 0x04, 0x7c, 0x04, 0x04}, //т  0xB2
    {0x0C, 0x50, 0x50, 0x50, 0x3C}, //у  0xB3
    {0x30, 0x48, 0xfc, 0x48, 0x30}, //ф  0xB4
    {0x44, 0x28, 0x10, 0x28, 0x44}, //x  0xB5
    {0x7c, 0x40, 0x40, 0x40, 0xfc}, //ц  0xB6
    {0x0c, 0x10, 0x10, 0x10, 0x7c}, //ч  0xB7
    {0x7c, 0x40, 0x7c, 0x40, 0x7c}, //ш  0xB8
    {0x7c, 0x40, 0x7c, 0x40, 0xfc}, //щ  0xB9
    {0x04, 0x7c, 0x50, 0x50, 0x20}, //ъ  0xBA
    {0x7c, 0x50, 0x50, 0x20, 0x7c}, //ы  0xBB
    {0x7c, 0x50, 0x50, 0x20, 0x00}, //ь  0xBC
    {0x28, 0x44, 0x54, 0x54, 0x38}, //э  0xBD
    {0x7c, 0x10, 0x38, 0x44, 0x38}, //ю  0xBE
    {0x08, 0x54, 0x34, 0x14, 0x7c} //я  0xBF
  };

  int font5x7rus_charsNum[]
  {
    53392,
    53393,
    53394,
    53395,
    53396,
    53397,
    53398,
    53399,
    53400,
    53401,
    53402,
    53403,
    53404,
    53405,
    53406,
    53407,
    53408,
    53409,
    53410,
    53411,
    53412,
    53413,
    53414,
    53415,
    53416,
    53417,
    53418,
    53419,
    53420,
    53421,
    53422,
    53423,
    53424,
    53425,
    53426,
    53427,
    53428,
    53429,
    53430,
    53431,
    53432,
    53433,
    53434,
    53435,
    53436,
    53437,
    53438,
    53439,
    53632,
    53633,
    53634,
    53635,
    53636,
    53637,
    53638,
    53639,
    53640,
    53641,
    53642,
    53643,
    53644,
    53645,
    53646,
    53647,
  };

}

template<uint16_t _charNum, uint8_t _fontW, uint8_t _fontH>
class IFont
{
protected:
  uint8_t (*_chars)[_fontW];
  //int _charsNum[_charNum];
public:
  virtual uint8_t* getBytes(int index) = 0;
  

};

class Font5x7 : public IFont<64, 5, 7>
{
private:

public:
  Font5x7(uint8_t (*arr)[5])
  {
    _chars = arr;
  }

  uint8_t* getBytes(int index) override
  {
    if(index <= 127)
    {
      return _chars[index];
    }
    return _chars[127];
  }

};

class Font5x7Rus : public IFont<64, 5, 7>
{
private:
  int *_charsNum;
public:
  Font5x7Rus(uint8_t (*arr)[5], int* charNum)
  {
    _chars = arr;
    _charsNum = charNum;
  }

  uint8_t* getBytes(int index) override
  {

    for(int i = 0; i < 64; i++)
    {
      if(index == _charsNum[i])
      {
        return _chars[i];
      }
    }

    return _chars[63];
  }
};

class Font3x5Digits : public IFont<10, 3, 5>
{
private:

public:
  Font3x5Digits(uint8_t (*arr)[3])
  {
    _chars = arr;
  }

  uint8_t* getBytes(int index) override
  {
    if(index <= 57 && index >= 48)
    {
      return _chars[index - 48];
    }
    return _chars[9];
  }

};

Font5x7Rus font5x7Rus = Font5x7Rus(WoWPixelFonts::font5x7rus, WoWPixelFonts::font5x7rus_charsNum);
Font5x7 font5x7 = Font5x7(WoWPixelFonts::font5x7);
Font3x5Digits font3x5Digits = Font3x5Digits(WoWPixelFonts::font3x5Digits);

#endif